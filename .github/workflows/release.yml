name: Release and Publish

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'STYLING_GUIDE.md'
      - '.gitignore'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://npm.pkg.github.com'

    - name: Install dependencies
      run: npm ci

    - name: Build library
      run: npm run build

    - name: Determine next version
      id: version
      run: |
        # Fetch all tags from the remote
        git fetch --tags
        
        # Get the latest semver tag
        LATEST_TAG=$(git tag -l --sort=-v:refname "v*.*.*" | head -n 1)
        
        if [ -z "$LATEST_TAG" ]; then
          echo "No semver tag found, starting with v0.1.0"
          LATEST_TAG="v0.1.0"
          # As it is the first release, we will create a tag and a release for it.
          # This is a special case.
          git tag $LATEST_TAG
          git push origin $LATEST_TAG
        fi
        
        echo "Latest tag: $LATEST_TAG"
        
        # Get the last commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
        # Determine version bump type
        if [[ $COMMIT_MSG =~ ^(feat|feature)(\(.+\))?!: ]] || [[ $COMMIT_MSG =~ BREAKING\ CHANGE ]]; then
          BUMP_TYPE="major"
        elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?: ]]; then
          BUMP_TYPE="minor"
        else
          BUMP_TYPE="patch"
        fi
        
        echo "Version bump type: $BUMP_TYPE"
        
        # Use npm to calculate the next version
        # Strip 'v' prefix for npm version command
        CURRENT_VERSION=${LATEST_TAG#v}
        # Create a temporary package.json to use npm's version bumping
        echo "{\"version\": \"$CURRENT_VERSION\"}" > temp_package.json
        NEW_VERSION=$(npm --no-git-tag-version version $BUMP_TYPE)
        rm temp_package.json
        
        # Remove 'v' prefix from new version
        NEW_VERSION=${NEW_VERSION#v}
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Next version: $NEW_VERSION"

    - name: Update package.json versions
      run: |
        # Update root package.json
        npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version --allow-same-version
        
        # Update dist/package.json
        cd dist
        npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version --allow-same-version
        cd ..

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json dist/package.json
        git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"

    - name: Create and push Git tag
      run: |
        git push
        git tag "v${{ steps.version.outputs.new_version }}"
        git push origin "v${{ steps.version.outputs.new_version }}"

    - name: Publish to GitHub Packages
      run: |
        cd dist
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        name: Release v${{ steps.version.outputs.new_version }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}