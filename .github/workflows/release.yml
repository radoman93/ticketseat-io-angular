name: Release and Publish

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'STYLING_GUIDE.md'
      - '.gitignore'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://npm.pkg.github.com'

    - name: Install dependencies
      run: npm ci

    - name: Build library
      run: npm run build

    - name: Determine version bump
      id: version
      run: |
        # Get the last commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
        # Determine version bump type based on commit message
        if [[ $COMMIT_MSG =~ ^(feat|feature)(\(.+\))?!: ]] || [[ $COMMIT_MSG =~ BREAKING\ CHANGE ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
          echo "Version bump: MAJOR (breaking change)"
        elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?: ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
          echo "Version bump: MINOR (new feature)"
        elif [[ $COMMIT_MSG =~ ^(fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
          echo "bump=patch" >> $GITHUB_OUTPUT
          echo "Version bump: PATCH (bug fix/improvement)"
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
          echo "Version bump: PATCH (default)"
        fi

    - name: Bump version
      id: bump
      run: |
        cd dist
        
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Function to check if version exists in registry
        version_exists() {
          npm view "@${{ github.repository_owner }}/ticketseat-io-angular@$1" version &>/dev/null
          return $?
        }
        
        # Function to increment patch version
        increment_patch() {
          local ver=$1
          local major=$(echo $ver | cut -d. -f1)
          local minor=$(echo $ver | cut -d. -f2)
          local patch=$(echo $ver | cut -d. -f3)
          echo "$major.$minor.$((patch + 1))"
        }
        
        # Start with the next patch version
        NEW_VERSION=$(increment_patch $CURRENT_VERSION)
        
        # Keep incrementing until we find an available version
        while version_exists "$NEW_VERSION"; do
          echo "Version $NEW_VERSION exists, trying next version..."
          NEW_VERSION=$(increment_patch $NEW_VERSION)
        done
        
        echo "Found available version: $NEW_VERSION"
        
        # Update package.json with new version
        npm version $NEW_VERSION --no-git-tag-version --allow-same-version
        
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "New version: ${NEW_VERSION}"

    - name: Update main package.json version
      run: |
        DIST_VERSION=$(node -p "require('./dist/package.json').version")
        npm version $DIST_VERSION --no-git-tag-version --allow-same-version

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "chore: bump version to v${{ steps.bump.outputs.new_version }}" || exit 0

    - name: Create Git tag
      id: tag
      run: |
        NEW_VERSION=${{ steps.bump.outputs.new_version }}
        TAG="v${NEW_VERSION}"
        
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists, skipping tag creation"
        else
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "Created and pushed tag: $TAG"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Check if release exists
      id: check_release
      run: |
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.bump.outputs.new_version }}")
        if [ "$HTTP_STATUS" -eq "404" ]; then
          echo "exists=false" >> $GITHUB_OUTPUT
        else
          echo "exists=true" >> $GITHUB_OUTPUT
        fi

    - name: Publish to GitHub Packages
      run: |
        cd dist
        
        # Verify the version doesn't exist one final time
        if npm view "@${{ github.repository_owner }}/ticketseat-io-angular@${{ steps.bump.outputs.new_version }}" version &>/dev/null; then
          echo "Error: Version ${{ steps.bump.outputs.new_version }} already exists in registry"
          exit 1
        fi
        
        echo "Publishing version ${{ steps.bump.outputs.new_version }}"
        echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
        
        # Attempt to publish with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if npm publish --access public; then
            echo "Successfully published version ${{ steps.bump.outputs.new_version }}"
            exit 0
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Publish failed, retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
              sleep 5
            fi
          fi
        done
        
        echo "Failed to publish after $MAX_RETRIES attempts"
        exit 1
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.bump.outputs.new_version }}
        tag_name: v${{ steps.bump.outputs.new_version }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}